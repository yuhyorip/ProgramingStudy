
할 일

1. 이미지
  - 캡처
  - 갤러리 선택

2. 동작 선택
  - 딜레이 추가
  - 삭제/순서 변경

3. 동작 추가 시 팝업창
  - 다시 입력/추가/취소 선택 가능

4. 곡선 입력

5. 

** MOUSEEVENTF_MOVE 로 마우스를 이동했더니 오차가 발생함. win32api.SetCursorPos((x,y)) 를 사용함
win32api.SetCursorPos((300,300))
print("SCP Result :"+str(win32api.GetCursorPos()))
win32api.mouse_event(win32con.MOUSEEVENTF_MOVE,50,50,0,0)
print("MOVE Result :"+str(win32api.GetCursorPos()))

result : 
SCP Result :(300, 300)
MOVE Result :(348, 347)

(350,350)으로 안가고 오차가 있음 **


from tkinter import*
import pyautogui
import win32api
import win32con
import time
import tkinter.messagebox
import multiprocessing as mp
from pynput.keyboard import Key,Listener

def Run(event):

    win=Tk()
    win.title("매크로 제작")
    win.geometry("300x300")
    win.option_add("Font","바탕 20")


    #동작 리스트
    global motions
    motions=[]
    
    #입력창 비우기 함수
    def clearEntryIterNum(event):
        if entIterNum.get()=="반복 횟수":
            entIterNum.delete(0,len(entIterNum.get()))
    def clearEntryDelay(event):
        if entDelay.get()=="-초":
            entDelay.delete(0,len(entDelay.get()))

    #동작 감지 함수
    def MotionCapture():
        time.sleep(0.3)
        state_left = win32api.GetKeyState(0x01)
        state_right = win32api.GetKeyState(0x02)
        def MC(l,r):
            check=0
            a = win32api.GetKeyState(0x01)
            b = win32api.GetKeyState(0x02)
            if a != l:
                if a < 0:
                    x,y=win32api.GetCursorPos()
                    motions.append((x,y,"LP"))
                    tmp=labMotionList.cget("text")
                    textUpdate=tmp+"\n("+str(x)+","+str(y)+") Left Pressed"
                    labMotionList.config(text=textUpdate)

                else:
                    x,y=win32api.GetCursorPos()
                    motions.append((x,y,"LR"))
                    tmp=labMotionList.cget("text")
                    textUpdate=tmp+"\n("+str(x)+","+str(y)+") Left Released"
                    labMotionList.config(text=textUpdate)
                    check=1
            if b != r:
                if b < 0:
                    x,y=win32api.GetCursorPos()
                    motions.append((x,y,"RP"))
                    tmp=labMotionList.cget("text")
                    textUpdate=tmp+"\n("+str(x)+","+str(y)+") Right Pressed"
                    labMotionList.config(text=textUpdate)

                else:
                    x,y=win32api.GetCursorPos()
                    motions.append((x,y,"RR"))
                    tmp=labMotionList.cget("text")
                    textUpdate=tmp+"\n("+str(x)+","+str(y)+") Right Released"
                    labMotionList.config(text=textUpdate)
                    check=1
            else:
                if a<0:
                    x,y=win32api.GetCursorPos()
                    motions.append((x,y,"M"))

            if check==0:
                win.after(11,MC,a,b)
        MC(state_left,state_right)

    #동작 감지 버튼
    btnMotionCapture=Button(win)
    btnMotionCapture.config(text="동작 감지")
    btnMotionCapture.config(command=MotionCapture)
    btnMotionCapture.pack()

    #동작 리스트 출력
    labMotionList=Label(win)
    labMotionList.config(text='')
    labMotionList.pack()

    #딜레이 추가 함수
    def DelayAdd():
        try:
            if float(entDelay.get())>0:
                motions.append((float(entDelay.get()),0,"D"))
                tmp=labMotionList.cget("text")
                textUpdate=tmp+"\n"+entDelay.get()+"초 대기"
                labMotionList.config(text=textUpdate)
        except ValueError:
            tkinter.messagebox.showwarning(title="오류",message="딜레이 입력값이 올바르지 않습니다")
        entDelay.delete(0,len(entDelay.get()))
        entDelay.insert(0,"-초") 

    #딜레이 시간 입력
    entDelay=Entry(win)
    entDelay.insert(0,"-초")
    entDelay.bind("<Button-1>",clearEntryDelay)
    entDelay.pack()
    

    #딜레이 추가 버튼
    btnDelayAdd=Button(win)
    btnDelayAdd.config(text="딜레이 추가")
    btnDelayAdd.config(command=DelayAdd)
    btnDelayAdd.pack()

    #매크로 반복 횟수
    entIterNum=Entry(win)
    entIterNum.insert(0,"반복 횟수")
    entIterNum.bind("<Button-1>",clearEntryIterNum)
    entIterNum.pack()

    global Max
    global done
    Max=0
    done=0

    #매크로 실행 횟수 
    labMacroRunTime=Label(win)
    labMacroRunTime.config(text="--/--")
    labMacroRunTime.pack()

    #매크로 실행 함수
    def MacroRun():
        try:    
            Max=entIterNum.get()
            IterNum=int(entIterNum.get())
            labMacroRunTime.config(text="0/"+Max)
            labMacroRunTime.update_idletasks()
            time.sleep(0.3)
            entIterNum.delete(0,len(entIterNum.get()))
            entIterNum.insert(0,"반복 횟수")
            for i in range(IterNum):
                if not event.is_set():
                    for j in range(0,len(motions)):
                        if motions[j][2]=="LP":
                            win32api.SetCursorPos((motions[j][0],motions[j][1]))
                            time.sleep(0.01)
                            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,motions[j][0],motions[j][1],0,0)
                            
                        elif motions[j][2]=="LR":
                            win32api.SetCursorPos((motions[j][0],motions[j][1]))
                            time.sleep(0.01)
                            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,motions[j][0]-motions[j-1][0],motions[j][1]-motions[j-1][1],0,0)
                            
                        elif motions[j][2]=="RP":
                            win32api.SetCursorPos((motions[j][0],motions[j][1]))
                            time.sleep(0.01)
                            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTDOWN,motions[j][0]-motions[j-1][0],motions[j][1]-motions[j-1][1],0,0)
                            
                        elif motions[j][2]=="RR":
                            win32api.SetCursorPos((motions[j][0],motions[j][1]))
                            time.sleep(0.01)
                            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTUP,motions[j][0]-motions[j-1][0],motions[j][1]-motions[j-1][1],0,0)
                            
                        elif motions[j][2]=="M":
                            win32api.SetCursorPos((motions[j][0],motions[j][1]))
                            time.sleep(0.001)

                        elif motions[j][2]=="D":
                            time.sleep(motions[j][0])
                            
                    labMacroRunTime.config(text=str(i+1)+"/"+Max)
                    labMacroRunTime.update_idletasks()
                else:
                    labMacroRunTime.config(text="--/--")
                    labMacroRunTime.update_idletasks()
                    event.clear()
                    break   
                
        except ValueError:
            tkinter.messagebox.showwarning(title="오류",message="반복 횟수 입력값이 올바르지 않습니다")


    #매크로 실행 버튼
    btnMacroRun=Button(win)
    btnMacroRun.config(text="실행")
    btnMacroRun.config(command=MacroRun)
    btnMacroRun.pack()

    #동작 리스트 초기화 버튼
    def initMotions():
        global motions
        motions=[]
        labMotionList.config(text='')
        labMacroRunTime.config(text='--/--')
        entIterNum.delete(0,len(entIterNum.get()))
        entIterNum.insert(0,"반복 횟수")
        entDelay.delete(0,len(entDelay.get()))
        entDelay.insert(0,"-초")

    btnListInit=Button(win)
    btnListInit.config(text="초기화",command=initMotions)
    btnListInit.pack()

    win.mainloop()

def abc(event):   
    
    def on_press(key):
        if str(key)=="'p'":
            event.set()
    
    def on_release(key):
        pass
    
    with Listener(on_press=on_press, on_release=on_release) as listener:
            listener.join()

if __name__ == "__main__":
    event=mp.Event()
    p = mp.Process(target=abc,args=(event,))
    p.start()
    Run(event)



