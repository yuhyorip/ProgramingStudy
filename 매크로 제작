
할 일

1. 이미지
  - 캡처
  - 갤러리 선택

2. 동작 선택
  - 딜레이 추가
  - 삭제/순서 변경

3. 동작 추가 시 팝업창
  - 다시 입력/추가/취소 선택 가능

4. 곡선 입력

5. 

** MOUSEEVENTF_MOVE 로 마우스를 이동했더니 오차가 발생함. win32api.SetCursorPos((x,y)) 를 사용함
win32api.SetCursorPos((300,300))
print("SCP Result :"+str(win32api.GetCursorPos()))
win32api.mouse_event(win32con.MOUSEEVENTF_MOVE,50,50,0,0)
print("MOVE Result :"+str(win32api.GetCursorPos()))

result : 
SCP Result :(300, 300)
MOVE Result :(348, 347)

(350,350)으로 안가고 오차가 있음 **


**이미지 선택 캡쳐**
import time
import pyscreenshot
import win32api
import pyautogui
import win32con

cord=[]
state_left = win32api.GetKeyState(0x01)
print(state_left)
while True:
    a = win32api.GetKeyState(0x01)
    
    if a != state_left:
        if a < 0:
            x1,y1=win32api.GetCursorPos()
            cord.append(x1)
            cord.append(y1)
            print(x1)
            state_left=a
        elif a >= 0:
            x2,y2=win32api.GetCursorPos()
            cord.append(x2)
            cord.append(y2)
            break
    time.sleep(0.01)

pic = pyscreenshot.grab(bbox=(cord[0], cord[1], cord[2], cord[3]))
#pic.save("ss.png")

time.sleep(3)
start = pyautogui.locateCenterOnScreen(pic)
pyautogui.moveTo(start)
#win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,)

할 일 : 커서 바꾸기


#label 이미지 안뜸
https://stackoverflow.com/questions/13148975/tkinter-label-does-not-show-image

import base64
import ctypes
from tkinter import*
from tkinter import filedialog
import zlib
import pyautogui
import win32api
import win32con
import time
import tkinter.messagebox
import multiprocessing as mp
from pynput.keyboard import Key,Listener
from tkinter import ttk
import tkinterDnD
import pyscreenshot
from PIL import Image
from PIL import ImageTk as itk

def Run(event):

    #title bar icon 제거
    # icon=zlib.decompress(base64.b64decode('eJxjYGAEQgEBBiDJwZDBy''sAgxsDAoAHEQCEGBQaIOAg4sDIgACMUj4JRMApGwQgF/ykEAFXxQRc='))
    # transparentIcon=ImageTk.PhotoImage(data=icon)

    win=Tk()
    win.title("매크로 제작")
    win.geometry("700x400+350+200")
    win.tk.call('wm', 'iconphoto', win._w, tkinter.PhotoImage(file='logo.png'))
    #win.option_add("Font","바탕 20") 
    #win['background']='#ff8247'
    win.overrideredirect(True)

    windowbg=PhotoImage(file="background.png")
    labelBackground=Label(win, image=windowbg,bd=0,borderwidth=0)
    labelBackground.place(x=0,y=0)

    titleBarImage=PhotoImage(file="titlebarImage.png")
    titleBar=Frame(win,width=700,height=55)
    titleBar.place(x=0,y=0)

    global x1
    global y1
    x1=0
    y1=0
    global winX
    global winY
    winX=350
    winY=200

    def beforeDrag(event):
        global x1
        global y1
        x1,y1=win32api.GetCursorPos()

    def dragWindow(event):
        global x1
        global y1
        global winX
        global winY

        win.geometry(f'+{event.x_root-x1+winX}+{event.y_root-y1+winY}')
        winX=winX+event.x_root-x1
        winY=winY+event.y_root-y1
        x1=event.x_root
        y1=event.y_root

    titleBarBg=Label(titleBar,image=titleBarImage,relief="flat",bd=0)
    titleBarBg.bind("<Button-1>",beforeDrag)
    titleBarBg.bind("<B1-Motion>",dragWindow)
    titleBarBg.place(x=0,y=0)

    exitButton=Label(titleBar,text="×",bd=0,bg="gray19",font=('*Font',20),fg="snow",relief="flat")
    exitButton.bind("<Button-1>", lambda e: win.destroy())
    exitButton.place(x=665,y=9)

    # win.overrideredirect(True) 이걸 함으로써 iconic화 하면 taskbar에 아이콘이 뜨지만 window를 키면 사라지는 문제 발생
    # 혹시 taskbar에 임의로 하나의 icon을 추가할 수 있고, 그 icon을 win과 연결할 수 있으면 해결할 수 있지 않을까?
    # iconicButton=Label(titleBar,text="-",bd=0,bg="gray19",font=('*Font',20),fg="snow",relief="flat")
    # iconicButton.bind("<Button-1>", lambda e: win.iconify())
    # iconicButton.place(x=640,y=9)

    #동작 리스트
    global motions
    motions=[]
    
    #입력창 비우기 함수
    def clearEntryIterNum(event):
        if entIterNum.get()=="반복 횟수":
            entIterNum.delete(0,len(entIterNum.get()))
    def clearEntryDelay(event):
        if entDelay.get()=="-(초)":
            entDelay.delete(0,len(entDelay.get()))
            entDelay.config(fg="snow")

    #EmptyEntry
    def emptyEntry(event):
        if len(entDelay.get())==1 or len(entDelay.get())==0:
            entDelay.delete(0,len(entDelay.get()))
            entDelay.insert(0,"-(초)")
            entDelay.config(fg="gray40")
            entDelay.icursor(0)

    #동작 감지 함수
    def MotionCapture():
        time.sleep(0.3)
        state_left = win32api.GetKeyState(0x01)
        state_right = win32api.GetKeyState(0x02)
        def MC(l,r):
            check=0
            a = win32api.GetKeyState(0x01)
            b = win32api.GetKeyState(0x02)
            if a != l:
                if a < 0:
                    x,y=win32api.GetCursorPos()
                    motions.append((x,y,"LP"))
                    tmp=labMotionList.cget("text")
                    textUpdate=tmp+"("+str(x)+","+str(y)+") Left Pressed\n"
                    labMotionList.config(text=textUpdate)

                else:
                    x,y=win32api.GetCursorPos()
                    motions.append((x,y,"LR"))
                    tmp=labMotionList.cget("text")
                    textUpdate=tmp+"("+str(x)+","+str(y)+") Left Released\n"
                    labMotionList.config(text=textUpdate)
                    check=1
            if b != r:
                if b < 0:
                    x,y=win32api.GetCursorPos()
                    motions.append((x,y,"RP"))
                    tmp=labMotionList.cget("text")
                    textUpdate=tmp+"("+str(x)+","+str(y)+") Right Pressed\n"
                    labMotionList.config(text=textUpdate)

                else:
                    x,y=win32api.GetCursorPos()
                    motions.append((x,y,"RR"))
                    tmp=labMotionList.cget("text")
                    textUpdate=tmp+"("+str(x)+","+str(y)+") Right Released\n"
                    labMotionList.config(text=textUpdate)
                    check=1
            else:
                if a<0:
                    x,y=win32api.GetCursorPos()
                    motions.append((x,y,"M"))

            if check==0:
                win.after(11,MC,a,b)
        MC(state_left,state_right)

    #Left Frame
    frame1=tkinter.Frame(win,width=213,height=327,relief="raised", bd=0,bg='gray12')
    frame1.place(x=15,y=65)
    frame1.pack_propagate(False)

    # frame1Canvas=tkinter.Canvas(frame1,width=213,height=327)
    # frame1Canvas.pack()

    # tmp1BgImage=Image.open('frame1bg.jpg')
    # frame1BgImage=itk.PhotoImage(tmp1BgImage.resize((213,327)))
    # frame1Canvas.create_image(0,0,image=frame1BgImage)

    frame2=tkinter.Frame(win,width=213,height=327,relief="raised", bd=0,bg="gray12")
    frame2.place(x=245,y=65)
    frame2.pack_propagate(False)

    frame3=tkinter.Frame(win,width=213,height=327,relief="raised", bd=0,bg="gray12")
    frame3.place(x=473,y=65)
    frame3.pack_propagate(False)      

    #동작 감지 버튼
    btnMotionCapture=Button(frame1,width=12, font=('Arial',15),bd=0,bg="gray12",fg="gray40")
    btnMotionCapture.config(text="클릭 / 드래그")
    btnMotionCapture.config(command=MotionCapture)
    btnMotionCapture.bind("<Enter>",lambda e: btnMotionCapture.config(fg="snow"))
    btnMotionCapture.bind("<Leave>",lambda e: btnMotionCapture.config(fg="gray40"))
    btnMotionCapture.pack(pady=(10,5))

    #동작 리스트 출력
    border_color = Frame(frame2, background="gray40")
    
    labMotionList=Label(border_color,font=('Arial',12),bg="gray15",fg="snow",anchor="nw")
    labMotionList.config(text='')
    labMotionList.pack(expand='true',fill='both',padx=5,pady=5)

    border_color.pack(expand='true',fill='both')

    #딜레이 추가 함수
    def DelayAdd():
        try:
            if float(entDelay.get())>0:
                motions.append((float(entDelay.get()),0,"D"))
                tmp=labMotionList.cget("text")
                textUpdate=tmp+"\n"+entDelay.get()+"초 대기"
                labMotionList.config(text=textUpdate)
        except ValueError:
            tkinter.messagebox.showwarning(title="오류",message="딜레이 입력값이 올바르지 않습니다")
        entDelay.delete(0,len(entDelay.get()))
        entDelay.insert(0,"-초") 

    #딜레이 frame
    frame11=tkinter.Frame(frame1,width=185,height=45,bg="gray12")
    frame11.pack_propagate(False)
    frame11.pack(padx=10,pady=(0,5))

    #딜레이 시간 입력
    entDelay=Entry(frame11,width=6,font=('Arial',15),bd=0,bg="gray24",fg="gray40")
    entDelay.insert(0,"-(초)")
    entDelay.bind("<Button-1>",clearEntryDelay)
    entDelay.bind("<BackSpace>",emptyEntry)
    entDelay.bind("<KeyPress>",clearEntryDelay)
    entDelay.pack(side="left",expand=True, fill='both',padx=(0,5))
    
    #딜레이 추가 버튼
    btnDelayAdd=Button(frame11,font=('Arial',15),bd=0,bg="gray12",fg="gray40")
    btnDelayAdd.config(text="딜레이 추가")
    btnDelayAdd.config(command=DelayAdd)
    btnDelayAdd.bind("<Enter>",lambda e: btnDelayAdd.config(fg="snow"))
    btnDelayAdd.bind("<Leave>",lambda e: btnDelayAdd.config(fg="gray40"))
    btnDelayAdd.pack(side="right",expand=True, fill='both')

    #매크로 반복 횟수
    entIterNum=Entry(frame3)
    entIterNum.insert(0,"반복 횟수")
    entIterNum.bind("<Button-1>",clearEntryIterNum)
    entIterNum.pack()

    global Max
    global done
    Max=0
    done=0

    #매크로 실행 횟수 
    labMacroRunTime=Label(frame3)
    labMacroRunTime.config(text="--/--")
    labMacroRunTime.pack()

    #매크로 실행 함수
    def MacroRun():
        try:    
            Max=entIterNum.get()
            IterNum=int(entIterNum.get())
            labMacroRunTime.config(text="0/"+Max)
            labMacroRunTime.update_idletasks()
            time.sleep(0.3)
            entIterNum.delete(0,len(entIterNum.get()))
            entIterNum.insert(0,"반복 횟수")
            for i in range(IterNum):
                if not event.is_set():
                    for j in range(0,len(motions)):
                        if motions[j][2]=="LP":
                            win32api.SetCursorPos((motions[j][0],motions[j][1]))
                            time.sleep(0.01)
                            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,motions[j][0],motions[j][1],0,0)
                            
                        elif motions[j][2]=="LR":
                            win32api.SetCursorPos((motions[j][0],motions[j][1]))
                            time.sleep(0.01)
                            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,motions[j][0]-motions[j-1][0],motions[j][1]-motions[j-1][1],0,0)
                            
                        elif motions[j][2]=="RP":
                            win32api.SetCursorPos((motions[j][0],motions[j][1]))
                            time.sleep(0.01)
                            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTDOWN,motions[j][0]-motions[j-1][0],motions[j][1]-motions[j-1][1],0,0)
                            
                        elif motions[j][2]=="RR":
                            win32api.SetCursorPos((motions[j][0],motions[j][1]))
                            time.sleep(0.01)
                            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTUP,motions[j][0]-motions[j-1][0],motions[j][1]-motions[j-1][1],0,0)
                            
                        elif motions[j][2]=="M":
                            win32api.SetCursorPos((motions[j][0],motions[j][1]))
                            time.sleep(0.001)

                        elif motions[j][2]=="D":
                            time.sleep(motions[j][0])
                        
                        elif motions[j][2]=="IC":
                            imageLocation = pyautogui.locateCenterOnScreen(imageDict[motions[j][0]])
                            pyautogui.moveTo(imageLocation)
                            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,motions[j][0],motions[j][1],0,0)
                            time.sleep(0.001)
                            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,motions[j][0]-motions[j-1][0],motions[j][1]-motions[j-1][1],0,0)
                            time.sleep(0.001)

                    labMacroRunTime.config(text=str(i+1)+"/"+Max)
                    labMacroRunTime.update_idletasks()
                else:
                    labMacroRunTime.config(text="--/--")
                    labMacroRunTime.update_idletasks()
                    event.clear()
                    break   
                
        except ValueError:
            tkinter.messagebox.showwarning(title="오류",message="반복 횟수 입력값이 올바르지 않습니다")


    #매크로 실행 버튼
    btnMacroRun=Button(frame3)
    btnMacroRun.config(text="실행")
    btnMacroRun.config(command=MacroRun)
    btnMacroRun.pack()

    #동작 리스트 초기화 버튼
    def initMotions():
        global motions
        motions=[]
        labMotionList.config(text='')
        labMacroRunTime.config(text='--/--')
        entIterNum.delete(0,len(entIterNum.get()))
        entIterNum.insert(0,"반복 횟수")
        entDelay.delete(0,len(entDelay.get()))
        entDelay.insert(0,"-(초)")
        imageLabelDict={}
        imageDict={}
        imageCount[0]=0
        for widget in frame1221.winfo_children():
            widget.destroy()

    btnListInit=Button(frame3)
    btnListInit.config(text="초기화",command=initMotions)
    btnListInit.pack()
    
    #image Frame
    frame12=tkinter.Frame(frame1,width=185,height=203,bg="gray12",bd=0)
    frame12.pack_propagate(False)
    frame12.pack(pady=(5,0))

    imageTextLabel=Label(frame12,text="이미지",font=('Arial',10),bd=0,bg="gray12",fg="snow")
    imageTextLabel.pack(anchor='nw')

    frame121=tkinter.Frame(frame12,width=185,height=26,bg="gray12",bd=0)
    frame121.pack_propagate(False)
    frame121.pack()

    #이미지 캡처하기
    imageLabelDict={}
    imageDict={}
    imageCount=[0]

    ##이미지 클릭했을때 motions와 기록창에 갱신
    # def imageLabelBind(lab):
        
    #     pass

    def ImageCapture():
        pic=None
        photo=None
        hcur = ctypes.windll.user32.GetCursor()
        ctypes.windll.user32.SetSystemCursor(hcur, 32515)
        cord=[]
        photoindicateList=[]
        state_left = win32api.GetKeyState(0x01)
        def Capture(state_left):
            checkImageCaptured = 0
            a = win32api.GetKeyState(0x01)
            if a != state_left:
                if a < 0:
                    x1,y1=win32api.GetCursorPos()
                    cord.append(x1)
                    cord.append(y1)
                    state_left=a
                    print("x1 :",x1)
                    print("y1 :",y1)
                elif a >= 0:
                    x2,y2=win32api.GetCursorPos()
                    cord.append(x2)
                    cord.append(y2)
                    print("x2 :",x2)
                    print("y2 :",y2)
                    checkImageCaptured=1
                    pic = pyautogui.screenshot(region=(cord[0], cord[1], cord[2]-cord[0], cord[3]-cord[1]))
                    hcur = ctypes.windll.user32.GetCursor()
                    ctypes.windll.user32.SetSystemCursor(hcur, 65539)
                time.sleep(0.01)
            if checkImageCaptured==0:
                win.after(1,Capture,state_left)
            elif checkImageCaptured==1:
                tmpImageCaptureWindow = Tk()
                photo = itk.PhotoImage(pic,master=tmpImageCaptureWindow)
                photoindicateList.append(photo)
                labImageDisplay = Label(tmpImageCaptureWindow)
                labImageDisplay.config(image=photo)
                labImageDisplay.pack()

                def ImageUse(pic):
                    #pic --> ImageTk.photoimage 로 변환
                    imageSize=50
                    photoC=itk.PhotoImage(pic.resize((imageSize,imageSize)),master=win)
                    #photoC indication 저장
                    photoindicateList.append(photoC)

                    #label 생성
                    labCapturedImage=str(imageCount[0])
                    labCapturedImage = Label(frame1221)
                    labCapturedImage.config(image=photoC)

                    if imageCount[0]%3==0:
                        labCapturedImage.place(x=0,y=(imageSize+10)*(imageCount[0]//3))
                    else:
                        labCapturedImage.place(x=(imageSize+6)*(imageCount[0]%3),y=(imageSize+10)*(imageCount[0]//3))
                        

                    #Label indication
                    imageLabelDict[imageCount[0]]=labCapturedImage
                    #pic indication
                    imageDict[imageCount[0]]=pic
                    #motions에 추가
                    motions.append((imageCount[0],0,"IC"))

                    imageCount[0]=imageCount[0]+1
                    tmpImageCaptureWindow.destroy()

                btnImageUse = Button(tmpImageCaptureWindow)
                btnImageUse.config(text="사용",command=lambda:ImageUse(pic))
                btnImageUse.pack()

                def ReCapture():
                    global state_left
                    tmpImageCaptureWindow.destroy()
                    ImageCapture()

                btnReCapture = Button(tmpImageCaptureWindow)
                btnReCapture.config(text="다시 캡처하기",command=ReCapture)
                btnReCapture.pack()

                tmpImageCaptureWindow.mainloop()
        Capture(state_left)              

    btnImageCapture = Button(frame121,font=('Arial',15),bd=0,bg="gray12",fg="gray40")
    btnImageCapture.config(text="캡처하기", command=ImageCapture)
    btnImageCapture.bind("<Enter>",lambda e: btnImageCapture.config(fg="snow"))
    btnImageCapture.bind("<Leave>",lambda e: btnImageCapture.config(fg="gray40"))
    btnImageCapture.pack(side="left",expand=True,fill="both",padx=(5,5))

    #Image upload
    def browseImage():
        photoindicateList=[]
        filename = filedialog.askopenfilename(initialdir = "/",
                                          title = "Select a File",
                                          filetypes = (("JPG/PNG 이미지",
                                                        "*.jpg;*,*.png;*"),
                                                       ("all files",
                                                        "*.*")))
        tmpBrowsedImage=Image.open(filename)
        browsedImage=itk.PhotoImage(tmpBrowsedImage.resize((50,50)))
        photoindicateList.append(browsedImage)
        # Change label contents
        labCapturedImage=str(imageCount[0])
        labCapturedImage = Label(frame1221)
        labCapturedImage.config(image=browsedImage)
        if imageCount[0]%3==0:
            labCapturedImage.place(x=0,y=60*(imageCount[0]//3))
        else:
            labCapturedImage.place(x=56*(imageCount[0]%3),y=60*(imageCount[0]//3))
        #Label indication
        imageLabelDict[imageCount[0]]=labCapturedImage
        #pic indication
        imageDict[imageCount[0]]=browsedImage
        #motions에 추가
        motions.append((imageCount[0],0,"IC"))
        #image count 증가
        imageCount[0]=imageCount[0]+1

    btnImageOpen = Button(frame121,font=('Arial',15),bd=0,bg="gray12",fg="gray40")
    btnImageOpen.config(text="불러오기", command=browseImage)
    btnImageOpen.bind("<Enter>",lambda e: btnImageOpen.config(fg="snow"))
    btnImageOpen.bind("<Leave>",lambda e: btnImageOpen.config(fg="gray40"))
    btnImageOpen.pack(side="left",expand=True,fill="both")

    #image canvas
    #canvasHeight=imageCount[0]*40+172  #185 / 172
    frame122 = tkinter.Frame(frame12,width=185,height=172,bd=0)
    frame122.pack_propagate(False)
    frame122.pack(pady=(5,0))

    imageCanvas = tkinter.Canvas(frame122,scrollregion=(0,0,185,440),bd=0)
    imageCanvas.pack(expand=True,fill='both')
    
    imageScrollbar=ttk.Scrollbar(frame122,orient='vertical',command=imageCanvas.yview)
    imageCanvas.configure(yscrollcommand=imageScrollbar.set)
    
    imageScrollbar.place(relx=1,rely=0,relheight=1,anchor='ne')

    frame1221=tkinter.Frame(imageCanvas,width=185,height=440,bg="gray15",bd=0)
    frame1221.bind('<MouseWheel>',lambda event: imageCanvas.yview_scroll(-int(event.delta/60),"units"))
    imageCanvas.create_window((0,0),window=frame1221,anchor='nw')

    win.mainloop()

def abc(event):   
    def on_press(key):
        if str(key)=="'p'":
            event.set()
    def on_release(key):
        pass
    with Listener(on_press=on_press, on_release=on_release) as listener:
            listener.join()
if __name__ == "__main__":
    event=mp.Event()
    p = mp.Process(target=abc,args=(event,))
    p.start()
    Run(event)
    
##grid 배치 test
import tkinter as tk

root = tk.Tk()

root.columnconfigure(0,weight=1,uniform=1)
root.columnconfigure(1,weight=1,uniform=1)
root.columnconfigure(2,weight=1,uniform=1)

# Create three frames to divide the screen horizontally
left_frame = tk.Frame(root, bg="gray", width=200, height=600)
middle_frame = tk.Frame(root, bg="white", width=200, height=600)
right_frame = tk.Frame(root, bg="gray", width=200, height=600)

# Grid the frames to fill the available space
left_frame.grid(row=0, column=0, rowspan=3, sticky="nsew")
middle_frame.grid(row=0, column=1, sticky="nsew")
right_frame.grid(row=0, column=2, rowspan=3, sticky="nsew")

right_frame.rowconfigure(0,weight=1,uniform=1)
right_frame.rowconfigure(1,weight=1,uniform=1)
right_frame.rowconfigure(2,weight=1,uniform=1)

left_frame.rowconfigure(0,weight=1,uniform=1)
left_frame.rowconfigure(1,weight=1,uniform=1)
left_frame.rowconfigure(2,weight=1,uniform=1)
left_frame.rowconfigure(3,weight=1,uniform=1)

left_frame.columnconfigure(0,weight=1)

# Create four buttons in the left frame
button1 = tk.Button(left_frame, text="Button 1")
button2 = tk.Button(left_frame, text="Button 2")
button3 = tk.Button(left_frame, text="Button 3")
button4 = tk.Button(left_frame, text="Button 4")



# Grid the buttons vertically in the left frame
button1.grid(row=0, column=0,sticky="ew",padx=10)
button2.grid(row=1, column=0,sticky="ew",padx=10)
button3.grid(row=2, column=0,sticky="ew",padx=10)
button4.grid(row=3, column=0,sticky="ew",padx=10)

# Create a label in the middle frame
label = tk.Label(middle_frame, text="Label", font=("Arial", 18))

# Grid the label in the middle frame
label.grid(row=0, column=0, pady=50)

# Create three buttons in the right frame
button5 = tk.Button(right_frame, text="Button 5", width=15)
button6 = tk.Button(right_frame, text="Button 6", width=15)
button7 = tk.Button(right_frame, text="Button 7", width=15)

# Grid the buttons vertically in the right frame
button5.grid(row=0, column=0, pady=10)
button6.grid(row=1, column=0, pady=10)
button7.grid(row=2, column=0, pady=10)

# Configure the grid weights to make the frames expandable
root.grid_rowconfigure(0, weight=1)
root.grid_columnconfigure(0, weight=1)
root.grid_columnconfigure(1, weight=1)
root.grid_columnconfigure(2, weight=1)

root.mainloop()
