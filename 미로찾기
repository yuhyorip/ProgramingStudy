def solution(maps):
    def minTime(desRow,desCol,maps,start,check,passs):
        timeList=[]
        #print("checking (",desRow,",",desCol,")")
        if desRow>0:
            if (maps[desRow-1][desCol]=='O' or maps[desRow-1][desCol]==passs) and check[(desRow-1,desCol)]>check[(desRow,desCol)]+1:
                #print("checking (",desRow,",",desCol,")")
                check[(desRow-1,desCol)]=check[(desRow,desCol)]+1
                timeList.append(minTime(desRow-1,desCol,maps,start,check,passs)+1)
            if maps[desRow-1][desCol]==start:
                return 0
        if desRow<len(maps)-1:
            if (maps[desRow+1][desCol]=='O' or maps[desRow+1][desCol]==passs) and check[(desRow+1,desCol)]>check[(desRow,desCol)]+1 :
                #print("checking (",desRow,",",desCol,")")
                check[(desRow+1,desCol)]=check[(desRow,desCol)]+1
                timeList.append(minTime(desRow+1,desCol,maps,start,check,passs)+1)
            if maps[desRow+1][desCol]==start:
                return 0    
        if desCol>0:
            if (maps[desRow][desCol-1]=='O' or maps[desRow][desCol-1]==passs) and check[(desRow,desCol-1)]>check[(desRow,desCol)]+1 :
                #print("checking (",desRow,",",desCol,")")
                check[(desRow,desCol-1)]=check[(desRow,desCol)]+1
                timeList.append(minTime(desRow,desCol-1,maps,start,check,passs)+1)
            if maps[desRow][desCol-1]==start:
                return 0
        if desCol<len(maps[0])-1:
            if (maps[desRow][desCol+1]=='O' or maps[desRow][desCol+1]==passs) and check[(desRow,desCol+1)]>check[(desRow,desCol)]+1 :
                #print("checking (",desRow,",",desCol,")")
                check[(desRow,desCol+1)]=check[(desRow,desCol)]+1
                timeList.append(minTime(desRow,desCol+1,maps,start,check,passs)+1)
            if maps[desRow][desCol+1]==start:
                return 0
        #print(timeList)
        if timeList==[]:return 999
        else:
            return min(timeList)
    
    LRow=LCol=0
    ERow=ECol=0
    check={}
    #L,E 좌표 찾기
    for i in range (len(maps)):
        for j in range (len(maps[0])):
            if maps[i][j]=='L':
                LRow=i
                LCol=j
                check[(i,j)]=0
            else:
                check[(i,j)]=999
    LtoS=minTime(LRow,LCol,maps,'S',check,'E')+1
    
    check={}
    for i in range (len(maps)):
        for j in range (len(maps[0])):
            if maps[i][j]=='E':
                ERow=i
                ECol=j 
                check[(i,j)]=0
            else:
                check[(i,j)]=999
    EtoL=minTime(ERow,ECol,maps,"L",check,'S')+1
    
    if EtoL+LtoS > 999 :
        return -1
    else:
        return EtoL+LtoS
    #각각 L과 E에 도달하기 위해 한 칸씩을 더 가야하므로 2를 더함
    
    
    S에서 L, L에서 E 의 순서를 지켜야 하기 때문에 L에서 S 까지의 최소 시간 + E에서 L까지의 최소 시간을 더하는 방식을 생각했다. 재귀 함수는 현재 지점에서 위 아래 양옆 네 방향을
    차례로 체크하면서 이동이 가능하면 그 지점에서 재귀 호출하는 방식이다. 각 LtoS, EtoL이 시행될 때에는 E 또는 L을 O 로 생각해야 하기 때문에 if문에 or를 집어넣어야 했다.
    
    채점을 해보았더니 특정 케이스에서 런타임 에러가 발생하였다. 확실히 DFS 방식의 재귀 함수를 사용하니 이런 문제가 발생한다.
    BFS나 queue를 사용하면 이러한 실행 시간 초과를 해결할 수 있을 것 같다. 그건 내일해야지..
    
    
